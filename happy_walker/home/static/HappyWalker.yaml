swagger: "2.0"
info:
  description: "This is Happy Walker API documentation"
  version: "1.0.0"
  title: "Happy Walker"
tags:
- name: "user"
  description: "User API"
  externalDocs:
    description: "Find out more"
schemes:
- "http"
- "https"
paths:
  /users/register:
    post:
      tags:
      - "user"
      summary: "Add a new User to the store"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "user successfully created"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              uid:
                type: "integer"
        460:
          description: "user with that credentials already exists"
          schema:
            $ref: "#/definitions/Errors"
        400:
          description: "input errors"
          schema:
            $ref: "#/definitions/ValidationErrors"
  /users/confirm_email:
    post:
      tags:
      - "user"
      summary: "User email verification"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "User email verification"
        required: true
        schema:
          $ref: "#/definitions/Email"
      responses:
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ValidationErrors"
        200:
          description: "user successfully activated"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              message:
                type: "string"
  /users/sign_in:
    post:
      tags:
      - "user"
      summary: "User login"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "Email or username and password"
        required: true
        schema:
          type: "object"
          properties:
            username_or_email:
              type: "string"
            password:
              type: "string"
      responses:
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ValidationErrors"
        432:
          description: "user does not exist in our database"
          schema:
            $ref: "#/definitions/Errors"
        455:
          description: "user is not active"
          schema:
            $ref: "#/definitions/Errors"
        467:
          description: "password incorrect"
          schema:
            $ref: "#/definitions/Errors"
        230:
          description: "login successfull"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              token:
                type: "string"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "User logout"
      description: ""
      responses:
        200:
          description: "succesfully logged out"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /users/{user_id}:
    get:
      tags:
      - "user"
      summary: "Get user profile"
      description: ""
      parameters:
      - in: "path"
        name: "user_id"
        required: true
        type: string
      responses:
        200:
          description: "success"
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              first_name:
                type: "string"
              last_name:
                type: "string"
              email:
                type: "string"
                required:
                  - username
                  - last_name
                  - first_name
        400:
          description: "This user does not exist"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /users/me:
    post:
      tags:
      - "user"
      summary: "Update user profile"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "update user profile"
        schema:
          type: "object"
          properties:
            first_name:
              type: "string"
            last_name:
              type: "string"
            email:
              type: "string"
      responses:
        201:
          description: "user successfully updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        202:
          description: "please confirm your new email"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "error"
          schema:
            $ref: "#/definitions/ValidationErrors"
        401:
          description: "user_id is not 'me', access denied"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /users/upload_photo:
    post:
      tags:
      - "user"
      summary: "upload photo"
      description: ""
      consumes:
        - multipart/form-data
      parameters:
        - in: fromData
          name: image
          type: file
          description: The file to upload
      responses:
        200:
          description: "success"
          schema:
            type: "object"
            properties:
              image:
                type: "string"
        400:
          description: "File too large or input empty"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              code:
                type: "string"
  /users/change_email:
    post:
      tags:
      - "user"
      summary: "Change email"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "Change email"
        required: true
        schema:
          type: "object"
          properties:
            uid:
              type: "integer"
            token:
              type: "string"
            new_email:
              type: "string"
      responses:
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ValidationErrors"
        401:
          description: "This user does not exist"
          schema:
            type: "object"
            properties:
              message:
               type: "string"
        201:
          description: "email successfully updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              uid:
                type: "integer"
              new_email:
                type: "string"
        406:
          description: "activation link is invalid"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /users/change_password:
    post:
      tags:
      - "user"
      summary: "Change password"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "Change password"
        required: true
        schema:
          type: "object"
          properties:
            old_password:
              type: "string"
            new_password:
              minLength: 8
              type: "string"
            repeat_password:
              type: "string"
      responses:
        201:
          description: "password successfully updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        401:
          description: "password is incorrect"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        444:
          description: "passwords doesn't match"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "input errors"
          schema:
            $ref: "#/definitions/ValidationErrors"
  /users/forgot_password:
    post:
      tags:
      - "user"
      summary: "Forgot password"
      description: "Forgot password"
      parameters:
      - in: "body"
        name: "body"
        description: "Forgot password"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
      responses:
        202:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        200:
          description: "User does not exist"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "input errors"
          schema:
            $ref: "#/definitions/ValidationErrors"
  /users/reset_password:
    post:
      tags:
      - "user"
      summary: "Reset password"
      description: "Reset password"
      parameters:
      - in: "body"
        name: "body"
        description: "Reset password"
        required: true
        schema:
          type: "object"
          properties:
            uid:
              type: "integer"
            token:
              type: "string"
            password:
              type: "string"
              minLength: 8
            repeat_password:
              type: "string"
      responses:
        201:
          description: "password successfully updated"
          schema:
            type: "object"
            properties:
              uid:
                type: "integer"
              message:
                type: "string"
        400:
          description: "input errors"
          schema:
            $ref: "#/definitions/ValidationErrors"
        404:
          description: "This user does not exist"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        444:
          description: "Passwords doesn't match"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        406:
          description: "Activation link is invalid"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
      password:
        minLength: 8
        type: "string"
  Email:
    type: "object"
    properties:
      uid:
        type: "integer"
      token:
        type: "string"
  Errors:
    type: "object"
    properties:
       errors:
         type: "array"
         items:
           type: "object"
           properties:
             code:
               type: "string"
             message:
               type: "string"
  ValidationErrors:
     type: "object"
     properties:
       errors:
         type: "array"
         items:
           type: "object"
           properties:
             field:
               type: "string"
             code:
               type: "string"
             message:
               type: "string"
externalDocs:
  description: "Happy Walker"
  url: "http://localhost:8000/home"
